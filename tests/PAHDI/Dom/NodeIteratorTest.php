<?phpclass NodeIteratorTest extends PAHDITest{	static public $iterator;	static public $elements;		static function setUpBeforeClass ()	{		$document = PAHDITest::getEmptyDocument();		$root = $document->createElement("div");			$e1 = $document->createElement("span");				$e11 = $document->createElement("a");				$uselessTxt = $document->createTextNode("test");				$e12 = $document->createElement("b");			$e2 = $document->createElement("i");				$e21 = $document->createElement("s");				$e22 = $document->createElement("h1");					$e221 = $document->createElement("img");					$e222 = $document->createElement("h2");						$e2221 = $document->createElement("hr");		$root->appendChild($e1);		$e1->appendChild($e11);		$e1->appendChild($uselessTxt);		$e1->appendChild($e12);		$root->appendChild($e2);		$e2->appendChild($e21);		$e2->appendChild($e22);		$e22->appendChild($e221);		$e22->appendChild($e222);		$e222->appendChild($e2221);				$filter = function ($node) {			return NodeFilter::FILTER_ACCEPT;		};		self::$iterator = $document->createNodeIterator($root, NodeFilter::SHOW_ELEMENT, $filter);		self::$elements = array(			$root, $e1, $e11, $e12, $e2, $e21, $e22, $e221, $e222, $e2221		);	}		function NextNode ()	{		$this->assertTrue(self::$iterator->referenceNode->isSameNode(self::$elements[0]));				$i = 0;		$ret = true;		$timer = self::startTimer();		while ($node = self::$iterator->nextNode()) {			if (!$node->isSameNode(self::$elements[$i++])) {				$ret = false;				break;			}		}		self::markTime($timer, "NodeIterator nextNode");				$this->assertEquals($i, count(self::$elements));		$this->assertTrue($ret);		$this->assertEquals(self::$iterator->nextNode(), null);		$this->assertTrue(self::$iterator->referenceNode->isSameNode(self::$elements[$i-1]));	}	function PreviousNode ()	{				$i = count(self::$elements) - 2;		$ret = true;		$timer = self::startTimer();				while ($node = self::$iterator->previousNode()) {			if (!$node->isSameNode(self::$elements[$i--])) {				$ret = false;				break;			}		}		self::markTime($timer, "NodeIterator previousNode");				$this->assertEquals($i + 1, 0);		$this->assertTrue($ret);		$this->assertEquals(self::$iterator->previousNode(), null);		$this->assertTrue(self::$iterator->referenceNode->isSameNode(self::$elements[0]));	}		function testAll ()	{		$this->NextNode();		$this->PreviousNode();		$this->assertTrue(self::$iterator->nextNode()->isSameNode(self::$elements[0]));		self::$iterator->detach();		try{			self::$iterator->nextNode();			$this->assertTrue(false);		} catch(Exception $e) {		}	}		function testIgnoreRootSiblings ()	{		$document = $this->getEmptyDocument();		$rootPrev = $document->createElement("div");		$root = $document->createTextNode("test");		$rootNext = $document->createElement("div");				$document->appendChild($rootPrev);		$document->appendChild($root);		$document->appendChild($rootNext);				$filter = function ($node) {			return NodeFilter::FILTER_ACCEPT;		};				$iterator = $document->createNodeIterator($root, NodeFilter::SHOW_ELEMENT, $filter);		$this->assertTrue($iterator->nextNode() === null);		$this->assertTrue($iterator->previousNode() === null);	}		function testCanUseInstancesOfNodeFilter ()	{		$document = $this->getEmptyDocument();		$root = $document->createElement("div");		$e1 = $document->createElement("div");		$e2 = $document->createElement("div");		$e1->id = "1";		$e2->id = "2";		$root->appendChild($e1);		$root->appendChild($e2);				$instance = new CustomFilter;		$iterator = $document->createNodeIterator($root, NodeFilter::SHOW_ELEMENT, $instance);		$node = $iterator->nextNode();		$this->assertEquals($node->id, "2");	}}class CustomFilter extends NodeFilter{	function acceptNode (Node $node)	{		return $node->id === "2" ? self::FILTER_ACCEPT : self::FILTER_REJECT;	}}