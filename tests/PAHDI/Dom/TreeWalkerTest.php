<?phpclass TreeWalkerTest extends PAHDITest{		function createStructure ()	{		$document = $this->getEmptyDocument();		$root = $document->createElement("div");			$e11 = $document->createElement("div");				$e111 = $document->createElement("div");				$e112 = $document->createElement("div");					$e1121 = $document->createElement("div");					$e1122 = $document->createElement("div");			$e12 = $document->createElement("div");				$e121 = $document->createElement("div");					$e1211 = $document->createElement("div");					$e1212 = $document->createElement("div");				$e122 = $document->createElement("div");					$e1221 = $document->createElement("div");					$e1222 = $document->createElement("div");		$root->id = "1";		$document->appendChild($root);		$e11->id = "1-1";		$root->appendChild($e11);		$e111->id = "1-1-1";		$e11->appendChild($e111);		$e112->id = "1-1-2";		$e11->appendChild($e112);				$e1121->id = "1-1-2-1";		$e112->appendChild($e1121);		$e1122->id = "1-1-2-2";		$e112->appendChild($e1122);			$e12->id = "1-2";		$root->appendChild($e12);		$e121->id = "1-2-1";		$e12->appendChild($e121);			$e1211->id = "1-2-1-1";		$e121->appendChild($e1211);		$e1212->id = "1-2-1-2";		$e121->appendChild($e1212);		$e122->id = "1-2-2";		$e12->appendChild($e122);				$e1221->id = "1-2-2-1";		$e122->appendChild($e1221);		$e1222->id = "1-2-2-2";		$e122->appendChild($e1222);		return array($document, $root);	}		function testNextPreviousNode ()	{		list($document, $root) = $this->createStructure();				$filter = function ($node) {			return $node->id === "1-1" ? NodeFilter::FILTER_REJECT : NodeFilter::FILTER_ACCEPT;		};		$iterator = $document->createTreeWalker($root, NodeFilter::SHOW_ELEMENT, $filter);		$ids = array(			"1-2", "1-2-1", "1-2-1-1", "1-2-1-2", "1-2-2", "1-2-2-1", "1-2-2-2"		);				$ret = false;		$i = 0;		while($node = $iterator->nextNode()) {			$ret = $node->id === $ids[$i++];			if (!$ret) {				break;			}		}		$this->assertEquals($i, count($ids));		$this->assertTrue($ret);				$ret = false;		$i = count($ids) - 2;		while($node = $iterator->previousNode()) {			$ret = $node->id === $ids[$i--];			if (!$ret) {				break;			}		}		$this->assertEquals($i + 1, 0);		$this->assertTrue($ret);	}		function testParentNode ()	{		list($document, $root) = $this->createStructure();				$filter = function ($node) {			return $node->id === "1-2" || $node->id === "1-2-2-2" ? NodeFilter::FILTER_ACCEPT : NodeFilter::FILTER_SKIP;		};		$iterator = $document->createTreeWalker($root, NodeFilter::SHOW_ELEMENT, $filter);		$node1 = $iterator->nextNode();		$node2 = $iterator->nextNode();				$this->assertEquals($node1->id, "1-2");		$this->assertEquals($node2->id, "1-2-2-2");				$par = $iterator->parentNode();		$this->assertEquals($par->id, "1-2");		$par2 = $iterator->parentNode();		$this->assertEquals($par2, null);	}		function testPreviousNextSibling ()	{		list($document, $root) = $this->createStructure();		$e13 = $document->createElement("div");		$e13->id = "1-3";		$root->appendChild($e13);				$filter = function ($node) {			return $node->id === "1-1" || $node->id === "1-3" ? NodeFilter::FILTER_ACCEPT : NodeFilter::FILTER_SKIP;		};		$iterator = $document->createTreeWalker($root, NodeFilter::SHOW_ELEMENT, $filter);				$node1 = $iterator->nextNode();		$node2 = $iterator->nextNode();				$this->assertEquals($node1->id, "1-1");		$this->assertEquals($node2->id, "1-3");				$pre = $iterator->previousSibling();		$this->assertEquals($pre->id, "1-1");		$this->assertEquals($iterator->previousSibling(), null);				$next = $iterator->nextSibling();		$this->assertEquals($pre->id, "1-1");		$this->assertEquals($iterator->nextSibling(), null);	}		function testFirstLastChild ()	{		list($document, $root) = $this->createStructure();				$filter = function ($node) {			return 	$node->id === "1-2" || $node->id === "1-2-2-2" ||					$node->id === "1-2-2" || $node->id === "1-2-1-1" ?					NodeFilter::FILTER_ACCEPT : NodeFilter::FILTER_SKIP;		};		$iterator = $document->createTreeWalker($root, NodeFilter::SHOW_ELEMENT, $filter);				$node = $iterator->nextNode();				$this->assertEquals($node->id, "1-2");				$first = $iterator->firstChild();		$this->assertEquals($first->id, "1-2-1-1");				$last = $iterator->lastChild();		$this->assertEquals($last->id, "1-2-2-2");	}		function testCanUseInstancesOfNodeFilter ()	{		list($document, $root) = $this->createStructure();				$instance = new CustomFilter2;		$iterator = $document->createTreeWalker($root, NodeFilter::SHOW_ELEMENT, $instance);				$node = $iterator->nextNode();		$this->assertEquals($node->id, "1-2");	}}class CustomFilter2 extends NodeFilter{	function acceptNode (Node $node)	{		return $node->id === "1-2" ? self::FILTER_ACCEPT : self::FILTER_REJECT;	}}